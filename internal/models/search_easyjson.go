// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD4176298DecodeMainInternalModels(in *jlexer.Lexer, out *Techs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "techs":
			if in.IsNull() {
				in.Skip()
				out.Techs = nil
			} else {
				in.Delim('[')
				if out.Techs == nil {
					if !in.IsDelim(']') {
						out.Techs = make([]string, 0, 4)
					} else {
						out.Techs = []string{}
					}
				} else {
					out.Techs = (out.Techs)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Techs = append(out.Techs, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4176298EncodeMainInternalModels(out *jwriter.Writer, in Techs) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"techs\":"
		out.RawString(prefix[1:])
		if in.Techs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Techs {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Techs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD4176298EncodeMainInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Techs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD4176298EncodeMainInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Techs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD4176298DecodeMainInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Techs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD4176298DecodeMainInternalModels(l, v)
}
func easyjsonD4176298DecodeMainInternalModels1(in *jlexer.Lexer, out *Technology) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "technology_name":
			out.TechnologyName = string(in.String())
		case "distance":
			out.Distance = float32(in.Float32())
		case "professionalism":
			out.Professionalism = float32(in.Float32())
		case "hard_skill":
			out.HardSkill = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4176298EncodeMainInternalModels1(out *jwriter.Writer, in Technology) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"technology_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.TechnologyName))
	}
	{
		const prefix string = ",\"distance\":"
		out.RawString(prefix)
		out.Float32(float32(in.Distance))
	}
	{
		const prefix string = ",\"professionalism\":"
		out.RawString(prefix)
		out.Float32(float32(in.Professionalism))
	}
	{
		const prefix string = ",\"hard_skill\":"
		out.RawString(prefix)
		out.Bool(bool(in.HardSkill))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Technology) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD4176298EncodeMainInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Technology) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD4176298EncodeMainInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Technology) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD4176298DecodeMainInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Technology) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD4176298DecodeMainInternalModels1(l, v)
}
func easyjsonD4176298DecodeMainInternalModels2(in *jlexer.Lexer, out *SearchTechs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "search_text":
			out.SearchText = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4176298EncodeMainInternalModels2(out *jwriter.Writer, in SearchTechs) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"search_text\":"
		out.RawString(prefix[1:])
		out.String(string(in.SearchText))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchTechs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD4176298EncodeMainInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchTechs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD4176298EncodeMainInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchTechs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD4176298DecodeMainInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchTechs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD4176298DecodeMainInternalModels2(l, v)
}
func easyjsonD4176298DecodeMainInternalModels3(in *jlexer.Lexer, out *RespProfessions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "techs":
			out.Techs = string(in.String())
		case "job_number":
			out.JobNumber = int(in.Int())
		case "additional":
			if in.IsNull() {
				in.Skip()
				out.Additional = nil
			} else {
				in.Delim('[')
				if out.Additional == nil {
					if !in.IsDelim(']') {
						out.Additional = make([]RespProfession, 0, 2)
					} else {
						out.Additional = []RespProfession{}
					}
				} else {
					out.Additional = (out.Additional)[:0]
				}
				for !in.IsDelim(']') {
					var v4 RespProfession
					(v4).UnmarshalEasyJSON(in)
					out.Additional = append(out.Additional, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4176298EncodeMainInternalModels3(out *jwriter.Writer, in RespProfessions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"techs\":"
		out.RawString(prefix[1:])
		out.String(string(in.Techs))
	}
	{
		const prefix string = ",\"job_number\":"
		out.RawString(prefix)
		out.Int(int(in.JobNumber))
	}
	{
		const prefix string = ",\"additional\":"
		out.RawString(prefix)
		if in.Additional == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Additional {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespProfessions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD4176298EncodeMainInternalModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespProfessions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD4176298EncodeMainInternalModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespProfessions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD4176298DecodeMainInternalModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespProfessions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD4176298DecodeMainInternalModels3(l, v)
}
func easyjsonD4176298DecodeMainInternalModels4(in *jlexer.Lexer, out *RespProfession) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "job_name":
			out.JobName = string(in.String())
		case "percent":
			out.Percent = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4176298EncodeMainInternalModels4(out *jwriter.Writer, in RespProfession) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"job_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.JobName))
	}
	{
		const prefix string = ",\"percent\":"
		out.RawString(prefix)
		out.Int(int(in.Percent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespProfession) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD4176298EncodeMainInternalModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespProfession) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD4176298EncodeMainInternalModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespProfession) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD4176298DecodeMainInternalModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespProfession) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD4176298DecodeMainInternalModels4(l, v)
}
func easyjsonD4176298DecodeMainInternalModels5(in *jlexer.Lexer, out *Professions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "professions":
			if in.IsNull() {
				in.Skip()
				out.Profession = nil
			} else {
				in.Delim('[')
				if out.Profession == nil {
					if !in.IsDelim(']') {
						out.Profession = make([]string, 0, 4)
					} else {
						out.Profession = []string{}
					}
				} else {
					out.Profession = (out.Profession)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Profession = append(out.Profession, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4176298EncodeMainInternalModels5(out *jwriter.Writer, in Professions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"professions\":"
		out.RawString(prefix[1:])
		if in.Profession == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Profession {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Professions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD4176298EncodeMainInternalModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Professions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD4176298EncodeMainInternalModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Professions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD4176298DecodeMainInternalModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Professions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD4176298DecodeMainInternalModels5(l, v)
}
func easyjsonD4176298DecodeMainInternalModels6(in *jlexer.Lexer, out *Profession) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "profession":
			out.Profession = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4176298EncodeMainInternalModels6(out *jwriter.Writer, in Profession) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"profession\":"
		out.RawString(prefix[1:])
		out.String(string(in.Profession))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Profession) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD4176298EncodeMainInternalModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Profession) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD4176298EncodeMainInternalModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Profession) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD4176298DecodeMainInternalModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Profession) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD4176298DecodeMainInternalModels6(l, v)
}
func easyjsonD4176298DecodeMainInternalModels7(in *jlexer.Lexer, out *PositionData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "job_name":
			out.JobName = string(in.String())
		case "technology_number":
			out.TechnologyNumber = int(in.Int())
		case "additional":
			if in.IsNull() {
				in.Skip()
				out.Additional = nil
			} else {
				in.Delim('[')
				if out.Additional == nil {
					if !in.IsDelim(']') {
						out.Additional = make([]Technology, 0, 2)
					} else {
						out.Additional = []Technology{}
					}
				} else {
					out.Additional = (out.Additional)[:0]
				}
				for !in.IsDelim(']') {
					var v10 Technology
					(v10).UnmarshalEasyJSON(in)
					out.Additional = append(out.Additional, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4176298EncodeMainInternalModels7(out *jwriter.Writer, in PositionData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"job_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.JobName))
	}
	{
		const prefix string = ",\"technology_number\":"
		out.RawString(prefix)
		out.Int(int(in.TechnologyNumber))
	}
	{
		const prefix string = ",\"additional\":"
		out.RawString(prefix)
		if in.Additional == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Additional {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PositionData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD4176298EncodeMainInternalModels7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PositionData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD4176298EncodeMainInternalModels7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PositionData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD4176298DecodeMainInternalModels7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PositionData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD4176298DecodeMainInternalModels7(l, v)
}
