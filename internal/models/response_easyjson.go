// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6ff3ac1dDecodeMainInternalModels(in *jlexer.Lexer, out *ResponseUserProfile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "user":
			if in.IsNull() {
				in.Skip()
				out.UserData = nil
			} else {
				if out.UserData == nil {
					out.UserData = new(ProfileUserDTO)
				}
				easyjson6ff3ac1dDecodeMainInternalModels1(in, out.UserData)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeMainInternalModels(out *jwriter.Writer, in ResponseUserProfile) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		if in.UserData == nil {
			out.RawString("null")
		} else {
			easyjson6ff3ac1dEncodeMainInternalModels1(out, *in.UserData)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseUserProfile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6ff3ac1dEncodeMainInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseUserProfile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6ff3ac1dEncodeMainInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseUserProfile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6ff3ac1dDecodeMainInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseUserProfile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6ff3ac1dDecodeMainInternalModels(l, v)
}
func easyjson6ff3ac1dDecodeMainInternalModels1(in *jlexer.Lexer, out *ProfileUserDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			out.Name = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeMainInternalModels1(out *jwriter.Writer, in ProfileUserDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	out.RawByte('}')
}
func easyjson6ff3ac1dDecodeMainInternalModels2(in *jlexer.Lexer, out *ResponseTechnologies) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "position_data":
			easyjson6ff3ac1dDecodeMainInternalModels3(in, &out.PositionData)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeMainInternalModels2(out *jwriter.Writer, in ResponseTechnologies) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"position_data\":"
		out.RawString(prefix)
		easyjson6ff3ac1dEncodeMainInternalModels3(out, in.PositionData)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseTechnologies) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6ff3ac1dEncodeMainInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseTechnologies) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6ff3ac1dEncodeMainInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseTechnologies) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6ff3ac1dDecodeMainInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseTechnologies) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6ff3ac1dDecodeMainInternalModels2(l, v)
}
func easyjson6ff3ac1dDecodeMainInternalModels3(in *jlexer.Lexer, out *PositionData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "job_name":
			out.JobName = string(in.String())
		case "technology_number":
			out.TechnologyNumber = int(in.Int())
		case "additional":
			if in.IsNull() {
				in.Skip()
				out.Additional = nil
			} else {
				in.Delim('[')
				if out.Additional == nil {
					if !in.IsDelim(']') {
						out.Additional = make([]Technology, 0, 2)
					} else {
						out.Additional = []Technology{}
					}
				} else {
					out.Additional = (out.Additional)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Technology
					easyjson6ff3ac1dDecodeMainInternalModels4(in, &v1)
					out.Additional = append(out.Additional, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeMainInternalModels3(out *jwriter.Writer, in PositionData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"job_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.JobName))
	}
	{
		const prefix string = ",\"technology_number\":"
		out.RawString(prefix)
		out.Int(int(in.TechnologyNumber))
	}
	{
		const prefix string = ",\"additional\":"
		out.RawString(prefix)
		if in.Additional == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Additional {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjson6ff3ac1dEncodeMainInternalModels4(out, v3)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson6ff3ac1dDecodeMainInternalModels4(in *jlexer.Lexer, out *Technology) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "technology_name":
			out.TechnologyName = string(in.String())
		case "distance":
			out.Distance = float32(in.Float32())
		case "professionalism":
			out.Professionalism = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeMainInternalModels4(out *jwriter.Writer, in Technology) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"technology_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.TechnologyName))
	}
	{
		const prefix string = ",\"distance\":"
		out.RawString(prefix)
		out.Float32(float32(in.Distance))
	}
	{
		const prefix string = ",\"professionalism\":"
		out.RawString(prefix)
		out.Float32(float32(in.Professionalism))
	}
	out.RawByte('}')
}
func easyjson6ff3ac1dDecodeMainInternalModels5(in *jlexer.Lexer, out *ResponseFavorites) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "favorites":
			if in.IsNull() {
				in.Skip()
				out.FavoritesData = nil
			} else {
				in.Delim('[')
				if out.FavoritesData == nil {
					if !in.IsDelim(']') {
						out.FavoritesData = make([]Favorite, 0, 1)
					} else {
						out.FavoritesData = []Favorite{}
					}
				} else {
					out.FavoritesData = (out.FavoritesData)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Favorite
					easyjson6ff3ac1dDecodeMainInternalModels6(in, &v4)
					out.FavoritesData = append(out.FavoritesData, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeMainInternalModels5(out *jwriter.Writer, in ResponseFavorites) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"favorites\":"
		out.RawString(prefix)
		if in.FavoritesData == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.FavoritesData {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjson6ff3ac1dEncodeMainInternalModels6(out, v6)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseFavorites) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6ff3ac1dEncodeMainInternalModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseFavorites) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6ff3ac1dEncodeMainInternalModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseFavorites) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6ff3ac1dDecodeMainInternalModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseFavorites) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6ff3ac1dDecodeMainInternalModels5(l, v)
}
func easyjson6ff3ac1dDecodeMainInternalModels6(in *jlexer.Lexer, out *Favorite) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "count_all":
			out.CountAll = int64(in.Int64())
		case "count_finished":
			out.CountFinished = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeMainInternalModels6(out *jwriter.Writer, in Favorite) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"count_all\":"
		out.RawString(prefix)
		out.Int64(int64(in.CountAll))
	}
	{
		const prefix string = ",\"count_finished\":"
		out.RawString(prefix)
		out.Int64(int64(in.CountFinished))
	}
	out.RawByte('}')
}
func easyjson6ff3ac1dDecodeMainInternalModels7(in *jlexer.Lexer, out *Response) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeMainInternalModels7(out *jwriter.Writer, in Response) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Response) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6ff3ac1dEncodeMainInternalModels7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Response) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6ff3ac1dEncodeMainInternalModels7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Response) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6ff3ac1dDecodeMainInternalModels7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Response) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6ff3ac1dDecodeMainInternalModels7(l, v)
}
